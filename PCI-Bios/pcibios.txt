  Atari PCI BIOS and device driver specification (Draft) 1.9
  Michael Schwingen, rincewind@discworld.dascon.de
  1997/11/28 19:06:00

  This document describes the software interface which is used by
  drivers and other system-oriented programs to get access to PCI cards
  present in Atari-compatible systems. Support for ISA and ISA PnP cards
  can be added without changes.
  ______________________________________________________________________

  Table of Contents:

  1.      Introduction

  1.1.    Related Documents

  2.      General

  2.1.    Resources

  2.2.    Calling Conventions

  2.3.    Device Handles

  2.4.    Locating the function entry points

  2.5.    Interrupt Handlers

  2.6.    Error codes

  3.      PCI BIOS functions

  3.1.    Find PCI device

  3.2.    Find PCI class code

  3.3.    Read Configuration {Byte|Word|Longword}

  3.4.    Read Configuration {Byte|Word|Longword} FAST

  3.5.    Write Configuration {Byte|Word|Longword}

  3.6.    Hook Interrupt Vector

  3.7.    Unhook Interrupt Vector

  3.8.    Generate Special Cycle

  3.9.    Get Interrupt Routing Options

  3.10.   Set Hardware Interrupt

  3.11.   Get Resource Data

  3.11.1. What are all these byte orders?

  3.12.   Memory/IO Read/Write

  3.13.   Example

  4.      Driver support functions

  4.1.    Get|Set card used flag

  4.2.    Call-back handlers

  4.2.1.  Call-back 0: Get Driver ID

  4.2.2.  Call-back 1: Try to remove driver

  5.      Machine  ID

  6.      PMMU support functions

  6.1.    Convert virtual to PCI bus address

  6.2.    Convert PCI bus to virtual address

  7.      To do/Notes
  ______________________________________________________________________

  11..  IInnttrroodduuccttiioonn

  This document describes the software interface which is used by
  drivers and other system-oriented programs to get access to PCI cards
  present in the system. Support for ISA and ISA PnP cards can be added
  without changes.

  11..11..  RReellaatteedd DDooccuummeennttss

  ·  PCI Local Bus Specification, Revision 2.0 April 30, 1993

  ·  PCI BIOS Specification, Revision 2.1, August 26, 1994

  22..  GGeenneerraall

  22..11..  RReessoouurrcceess

  All cards get their resources (memory and IO areas, interrupts)
  assigned and set by the system. Drivers and other programs may _n_o_t
  modify these settings.

  22..22..  CCaalllliinngg CCoonnvveennttiioonnss

  The PCI BIOS functions use the 680x0 CPU registers to pass arguments
  and to return status.

  The routines may modify only those registers which are used to pass
  parameters or to return information in as specified for the specific
  function, plus the status register.

  The routines must be called in Supervisor mode, and the available
  stack must be at least 1024 bytes.

  The functions may disable interrupts during execution, but will return
  with the interrupts in the same state as when they were called.

  All functions return an error code in D0 if an error occurred.

  22..33..  DDeevviiccee HHaannddlleess

  Every device on a PCI (or ISA) card is specified by using a device
  handle. The device handle is used as an opaque data type by the driver
  - no assumptions are to be made about the meaning of bits in this
  value.  device handles are positive 32-bit integers - negative values
  are used for error codes for functions which return device handles.

  22..44..  LLooccaattiinngg tthhee ffuunnccttiioonn eennttrryy ppooiinnttss

  The BIOS installs a "_PCI" cookie which points to the following
  structure of entry points to the individual functions:

       ______________________________________________________________________
       dc.l  0                     ; $00 pointer to sub cookie jar (for
                                   ; compatibility) or 0 if not present
       dc.l  1                     ; $04 version number of this structure
       dc.l  find_pci_device       ; $08
       dc.l  find_pci_classcode    ; $0C
       dc.l  read_config_byte
       dc.l  read_config_word
       dc.l  read_config_longword
       dc.l  fast_read_config_byte
       dc.l  fast_read_config_word
       dc.l  fast_read_config_longword
       dc.l  write_config_byte
       dc.l  write_config_word
       dc.l  write_config_longword
       dc.l  hook_interrupt
       dc.l  unhook_interrupt
       dc.l  special_cycle
       dc.l  get_routing
       dc.l  set_interrupt
       dc.l  get_resource
       dc.l  get_card_used
       dc.l  set_card_used
       dc.l  read_mem_byte
       dc.l  read_mem_word
       dc.l  read_mem_longword
       dc.l  write_mem_byte
       dc.l  write_mem_word
       dc.l  write_mem_longword
       dc.l  read_io_byte
       dc.l  read_io_word
       dc.l  read_io_longword
       dc.l  write_io_byte
       dc.l  write_io_word
       dc.l  write_io_longword
       dc.l  get_machine_id
       dc.l  virt_to_bus
       dc.l  bus_to_virt
       ______________________________________________________________________

  This structure, and the functions it points to, should be in ROM or
  some other place which is safe from being overwritten (eg. above
  phystop), if it is desirable that alternative Operating Systems can
  use the functions.

  The circumstances for calling the functions may need to be specified
  further for this case.

  22..55..  IInntteerrrruupptt HHaannddlleerrss

  For each hardware interrupt, there is a chain of interrupt handlers,
  as multiple cards can share the same interrupt.

  By specifying a device handle and an interrupt line on that card (INTA
  - INTD), a driver can hook into the chain that handles this interrupt
  without knowing which one it actually is.

  When an interrupt occurs, the driver is called with a value in A0
  which is set by the driver when hooking into the interrupt. The
  meaning of this parameter depends on the driver - it can be a device
  handle, a pointer to some driver-internal data structure, etc..

       ______________________________________________________________________
       interrupt_handler:
       Input:
         A0.L   value as passed to hook_interrupt
         D0.L   BIOS internal data
       Output:
         D0.L   bit 0 set if the interrupt was from this card. D0 unmodified
                otherwise.
       ______________________________________________________________________

  The interrupt handler must not modify any register except D0 (only as
  specified) and A0.  If the interrupt was caused by the card which this
  handler is monitoring, it must make sure that the card returns the
  interrupt line to inactive state, and return with D0.0 set.

  If the card did not cause the interrupt, the driver must not modify
  D0.

  The interrupt handler returns by using an RTS instruction.

  22..66..  EErrrroorr ccooddeess

  The following error codes can be returned by the PCI BIOS functions:

       ______________________________________________________________________
        $00000000   PCI_SUCCESSFUL
        $FFFFFFFE   PCI_FUNC_NOT_SUPPORTED
        $FFFFFFFD   PCI_BAD_VENDOR_ID
        $FFFFFFFC   PCI_DEVICE_NOT_FOUND
        $FFFFFFFB   PCI_BAD_REGISTER_NUMBER
        $FFFFFFFA   PCI_SET_FAILED
        $FFFFFFF9   PCI_BUFFER_TOO_SMALL
        $FFFFFFF8   PCI_GENERAL_ERROR
        $FFFFFFF7   PCI_BAD_HANDLE
       ______________________________________________________________________

  33..  PPCCII BBIIOOSS ffuunnccttiioonnss

  33..11..  FFiinndd PPCCII ddeevviiccee

  This function returns a device handle for a device that matches the
  given device and vendor ID.

  A driver can query multiple devices with the same device and vendor ID
  by starting with index 0 and calling this function until
  PCI_DEVICE_NOT_FOUND is returned.

       ______________________________________________________________________
       find_pci_device:
       Input:
         D0.L      Device ID in bits 15..0  (0 - $FFFF),
                   Vendor ID in bits 31..16 (0 - $FFFE)
         D1.W      Index (0 - # of cards with these IDs)
       Output:
         D0.L      device handle or error code
       ______________________________________________________________________

  33..22..  FFiinndd PPCCII ccllaassss ccooddee

  This function returns a device handle for a device that matches the
  given class code.

  A driver can query multiple devices with the same class code by
  starting with index 0 and calling this function until
  PCI_DEVICE_NOT_FOUND is returned.

       ______________________________________________________________________
       find_pci_classcode:
       Input:
         D0.L      class code in bits 23..0:
                     Base class in bit 23..16 (0 - $FF),
                     Sub  class in bit 15..8  (0 - $FF),
                     Prog. If.  in bit  7..0  (0)
         D1.W      Index (0 - # of cards with these IDs)
       Output:
         D0.L      device handle or error code
       ______________________________________________________________________

  33..33..  RReeaadd CCoonnffiigguurraattiioonn {{BByyttee||WWoorrdd||LLoonnggwwoorrdd}}

  These three functions read data from the PCI configuration space of a
  given card.

  !!!To do: specify if big or little endian addressing is used

  ______________________________________________________________________
  read_config_byte:
  read_config_word:
  read_config_longword:
  Input:
    D0.L      device handle
    A0.L      pointer to space for read data
    D1.B      Register number (0,1,2,... for Byte access)
    D1.B      Register number (0,2,4,... for Word access)
    D1.B      Register number (0,4,8,... for Longword access)
  Output:
    D0        error code (32 bits)
              read data at buffer pointed to by A0
  ______________________________________________________________________

  33..44..  RReeaadd CCoonnffiigguurraattiioonn {{BByyttee||WWoorrdd||LLoonnggwwoorrdd}} FFAASSTT

  These three functions read data from the PCI configuration space of a
  given card. They do only minimal error checking and are meant to be
  used in interrupt handlers.

  !!!To do: specify if big or little endian addressing is used

       ______________________________________________________________________
       fast_read_config_byte:
       fast_read_config_word:
       fast_read_config_longword:
       Input:
         D0.L      device handle
         D1.B      Register number (0,1,2,... for Byte access)
         D1.B      Register number (0,2,4,... for Word access)
         D1.B      Register number (0,4,8,... for Longword access)
       Output:
         D0        read data (8, 16 or 32 bits)
         SR:       carry flag may be set if an error occurred
                   (implementation dependent)
       ______________________________________________________________________

  33..55..  WWrriittee CCoonnffiigguurraattiioonn {{BByyttee||WWoorrdd||LLoonnggwwoorrdd}}

  These three functions write data to the PCI configuration space of a
  given card.

  !!!To do: specify if big or little endian addressing is used

  ______________________________________________________________________
  write_config_byte:
  write_config_word:
  write_config_longword:
  Input:
    D0.L      device handle
    D1.B      Register number (0,1,2,... for Byte access)
    D1.B      Register number (0,2,4,... for Word access)
    D1.B      Register number (0,4,8,... for Longword access)
    D2        data to write (8/16/32 bits)
  Output:
    D0.L      error code
  ______________________________________________________________________

  33..66..  HHooookk IInntteerrrruupptt VVeeccttoorr

  This function hooks the driver into the interrupt chain to which a
  specific interrupt on the given card is routed. The interrupt is
  enabled on the system level, however, it is the drivers responsibility
  to enable the interrupt on the card itself as needed.

  The driver should first hook into the interrupt chain, and then enable
  the interrupt on the card, in order not to cause spurious interrupts.

       ______________________________________________________________________
       hook_interrupt:
       Input:
         D0.L      device handle
         A0        pointer to interrupt handler
         A1        parameter for interrupt handler.
       Output:
         D0.L      error code
       ______________________________________________________________________

  The parameter (from A1) is passed to the interrupt handler unmodified
  - its meaning is totally driver dependent.

  33..77..  UUnnhhooookk IInntteerrrruupptt VVeeccttoorr

  This function removes the driver from the interrupt chain to which a
  specific interrupt on the given card is routed. The driver must turn
  off interrupt generation on the card before calling this function.

       ______________________________________________________________________
       unhook_interrupt:
       Input:
         D0.L      device handle
       Output:
         D0.L      error code
       ______________________________________________________________________

  33..88..  GGeenneerraattee SSppeecciiaall CCyyccllee

  This function generates a special cycle on the PCI bus.

       ______________________________________________________________________
       special_cycle:
       Input:
         D0.B      bus number
         D1.L      special cycle data
       Output:
         D0.L      error code
       ______________________________________________________________________

  33..99..  GGeett IInntteerrrruupptt RRoouuttiinngg OOppttiioonnss

  to be defined. Not for use by device drivers.

  33..1100..  SSeett HHaarrddwwaarree IInntteerrrruupptt

  to be defined. Not for use by device drivers.

  33..1111..  GGeett RReessoouurrccee DDaattaa

  This function returns data about the resources which a device uses.
  The returned structure may _n_o_t be modified by the driver.

  The driver can then use these information and directly access the
  device if he knows the type of byte ordering, or it can use the system
  routines (mem|io_read|write_...) which handle this transparently.

  The function returns a pointer to the first resource descriptor for
  this device. The driver can get the next descriptor by adding the
  length field to the address of the current descriptor.

  The descriptors are in the same order as the base address registers in
  the PCI configuration space of the device.

  If bit 15 of the flags is set, there is no next descriptor.

  A device can have multiple resources of the same type.

       ______________________________________________________________________
       get_resource:
       Input:
         D0.L      device handle
       Output:
         D0.L      pointer to array of resource descriptors or error code
       ______________________________________________________________________

  The resource descriptors look like this:

  ______________________________________________________________________
  struct resource_descriptor:
    next      DS.W 1    ; length of this structure in bytes
                        ; Use this to get next descriptor
    flags     DS.W 1    ; type of resource and misc flags
    start     DS.L 1    ; start address of resource
    length    DS.L 1    ; length of resource
    offset    DS.L 1    ; offset from PCI to physical CPU address
    dmaoffset DS.L 1    ; offset for DMA-Memory transfers.
    private   DS.B n    ; private data, used only by the PCI BIOS. Do not touch.
  ______________________________________________________________________

  The flags field is bit-coded as follows:

       ______________________________________________________________________
         RSC_IO      = $4000 ; This is an IO area (Memory area if bit is clear)
         RSC_LAST    = $8000 ; last resource for this device

         FLG_8BIT    = $0100 ; 8-bit accesses are supported
         FLG_16BIT   = $0200 ; 16-bit accesses are supported
         FLG_32BIT   = $0400 ; 32-bit accesses are supported
         FLG_ENDMASK = $000F ; Bit 0..3 specify which byte ordering is used:
                               0 = Motorola.
                               1 = Intel, address-swapped
                               2 = Intel, lane-swapped
                               3..14 = reserved
                               15 = unknown. Access card only via BIOS functions.
       ______________________________________________________________________

  The start field contains the start address on the PCI bus of the
  resource. The length field contains its length.

  The offset field contains the offset from physical CPU to PCI address
  for the resource - ie. the value that must be added to the PCI address
  to get the physical address in CPU address space.

  The dmaoffset gives the offset that must be added to a PCI address to
  get the physical address in CPU address space when doing DMA
  transfers.

  !!! is this still needed, or should we use virt_to_bus/bus_to_virt
  exclusively?

  33..1111..11..  WWhhaatt aarree aallll tthheessee bbyyttee oorrddeerrss??

  Motorola byte ordering (big endian) is what you would expect on a
  680x0 system: 8/16/32 bit accesses work as expected.

  When address-swapped Intel (little endian) byte ordering is used, 32
  bit accesses work without modifications. On 16 bit accesses, the
  address needs to be XOR'd with a value of 2, on 8-bit accesses the
  address is XOR'd with a value of 3. The data read or written is in
  correct format.

  When lane-swapped Intel (little endian) byte ordering is used, the
  address needs no modifications. 8-bit accesses work normal, on 16 and
  32 bit accesses the read or written data needs to be swapped (ror.w
  #8,d0 for 16 bit, ror.w d0:swap d0:ror.w d0 for 32 bit).

  33..1122..  MMeemmoorryy//IIOO RReeaadd//WWrriittee

  These functions read or write 8, 16 or 32-bit values from a memory or
  IO region and take care of the byte ordering - ie. the data and
  address are converted as if Motorola byte ordering was in use.

  A driver can use these functions for access to registers and small
  buffers. For larger amounts of data, the driver can choose to use his
  own copy routines, provided it knows the byte order in use.

       ______________________________________________________________________
       read_mem_byte:
       read_mem_word:
       read_mem_longword:
       write_mem_byte:
       write_mem_word:
       write_mem_longword:
       read_io_byte:
       read_io_word:
       read_io_longword:
       write_io_byte:
       write_io_word:
       write_io_longword:
       Input:
         D0.L      device handle
         D1.L      address to access (in physical CPU address space)
         A0.L      pointer to data in memory
       Output:
         D0.L      error code
       ______________________________________________________________________

  33..1133..  EExxaammppllee

  ·  use find_pci_device or find_pci_classcode to find out if there is a
     supported card and get a device handle for the card

  ·  use get_resource* to read the start address and length of a used
     resource.

  ·  Now, either: add the offset from the resource descriptor to the
     address to directly access the card.

  ·  Or: use the read_*/write_* functions to access the card.

  44..  DDrriivveerr ssuuppppoorrtt ffuunnccttiioonnss

  These functions are used to manage which card is in use by which
  driver. A driver can provide a means by which a call-back function can
  be called from another driver to deactivate this driver. This is
  necessary for the first driver to unhook from interrupt chains etc.,
  before the new driver can take over.

  44..11..  GGeett||SSeett ccaarrdd uusseedd ffllaagg

       ______________________________________________________________________
       get_card_used:
       Input:
         D0.L      device handle
         A0.L      pointer to longword where call-back address is stored
       Output:
         D0.L      error code or status
       ______________________________________________________________________

  The returned status is either 0 (the card is free), 1 (the card is in
  use), 2 (the card is in use, but the driver can be uninstalled) or 3
  (the card is in use, but can be taken over without further actions).

  Case 3 means that the driver which brought the card to this state may
  not hook into interrupt chains or other system resources which need to
  be unhooked when another driver takes over the card.

  If the return code is 2, the call-back function entry of the driver is
  returned in the memory pointed to by A0.

       ______________________________________________________________________
       set_card_used:
       Input:
         D0.L      device handle
         A0.L      address of call-back entry (not pointer to address!)
                   or 0L, 1L or 3L
       Output:
         D0.L      error code
       ______________________________________________________________________

  If the call-back entry is 0L, 1L or 3L, the card status is set to that
  value. Only a driver which 'owns' the card may use this.

  If any other value is passed, it is assumed to be a pointer to the
  drivers call back entry point, and the card status is set to 2 (in
  use, can be uninstalled).

  44..22..  CCaallll--bbaacckk hhaannddlleerrss

  Call-back functions are invoked by calling the call-back entry point,
  they return with RTS. Call-back functions may only modify those
  registers which are used to pass arguments or results.

  Call-back functions must be called in supervisor mode with at least
  1024 bytes stack available.

  The call-back function number is passed in D0.L.

  If the driver supports call-back functions, the following functions
  are mandatory:

  44..22..11..  CCaallll--bbaacckk 00:: GGeett DDrriivveerr IIDD

  The driver returns his ID (4-byte ASCII, same as the XBRA ID) in D0.L.

  44..22..22..  CCaallll--bbaacckk 11:: TTrryy ttoo rreemmoovvee ddrriivveerr

  The driver tries to uninstall. If it succeeds, it returns 0 in D0.L
  and sets the card status to 'free', otherwise, it returns 1.

  55..  MMaacchhiinnee  IIDD

  This function can be used to get a unique machine ID for the computer
  the driver is running on:

       ______________________________________________________________________
       get_machine_id:
       Input:
         none
       Output:
         D0.L      Machine ID, or 0 (no ID available), or error code
       ______________________________________________________________________

  Positive values are machine IDs. They contain a manufacturer code in
  bit 24..31 and a unique serial number which is set by the manufacturer
  during production in bit 0..23.

  66..  PPMMMMUU ssuuppppoorrtt ffuunnccttiioonnss

  These functions convert from virtual addresses (as the CPU uses them)
  to PCI bus addresses and back. This is necessary since the memory may
  be mapped non-linear by the PMMU even when not using virtual memory
  (it is on the MILAN).

  These functions are limited to TOS or TOS-like operating systems. If
  an operating systems uses a different memory layout, it will need to
  provide its own functions which drivers can use.

  When using these functions, the driver does not need to care about DMA
  offsets at all.

  66..11..  CCoonnvveerrtt vviirrttuuaall ttoo PPCCII bbuuss aaddddrreessss

  ______________________________________________________________________
  virt_to_bus:
  Input:
    D0.L      device handle
    D1.L      address in virtual CPU space
  Output:
    D0.L      length of contiguous mapped area, 0 if no DMA is possible
              at this address
    D1.L      PCI bus address
  ______________________________________________________________________

  66..22..  CCoonnvveerrtt PPCCII bbuuss ttoo vviirrttuuaall aaddddrreessss

  This function is the reverse of virt_to_bus. It might be slow, so the
  driver should avoid using it if it can determine the address by other
  means.

       ______________________________________________________________________
       bus_to_virt:
       Input:
         D0.L      device handle
         D1.L      PCI bus address
       Output:
         D0.L      length of contiguous mapped area, 0 if an error occurred
         D1.L      CPU (virtual) address
       ______________________________________________________________________

  77..  TToo ddoo//NNootteess

  ·  Document get_routing and set_interrupt

  ·  For non-PnP but soft-configured ISA cards, we might need a call by
     which the driver can request a free IO or memory region, ISA
     interrupt etc..

  ·  Document a method to reassign resource allocations for broken
     cards.

  ·  Should resource descriptors have a fixed length (I don't think so,
     without the length field? This would make them easier to access,
     but would make future extensions difficult or ugly.

  ·  The machine ID is not PCI specific. Should the function be part of
     the PCI BIOS, or should it placed somewhere else?

  ·  Are there cards which need the fast_read_* functions (ie. access to
     the PCI configuration area from an interrupt handler)? Otherwise,
     these might as well be removed - especially as these can't be
     unimplemented, due to the lack of error codes..

